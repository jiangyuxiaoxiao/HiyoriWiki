import{_ as n,o as s,c as a,a as t}from"./app-4b0bc845.js";const p={},e=t(`<h2 id="一-快速入门" tabindex="-1"><a class="header-anchor" href="#一-快速入门" aria-hidden="true">#</a> 一. 快速入门</h2><p><code>妃爱</code>使用<code>Fastapi</code>这一轻量级Web服务框架。<code>妃爱</code>可以通过自调用后端来实现一些功能，例如通过网页渲染来生成图片，也可以利用后端服务生成Web控制台页面。</p><p><code>妃爱</code>可以通过<code>nonebot.get_driver()</code>来获取当前的端口号。使用示例如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> nonebot <span class="token keyword">import</span> get_driver

config <span class="token operator">=</span> get_driver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
port <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">&quot;port&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-后端基础" tabindex="-1"><a class="header-anchor" href="#二-后端基础" aria-hidden="true">#</a> 二. 后端基础</h2><h3 id="_2-1-静态文件请求" tabindex="-1"><a class="header-anchor" href="#_2-1-静态文件请求" aria-hidden="true">#</a> 2.1 静态文件请求</h3><ul><li><p><code>妃爱</code>将路径在<code>Hiyori/Data/Web</code>下的所有文件视为静态文件并挂载在Url路径<code>/</code>下。<br> 例如，当我们请求一个路径为<code>Hiyori/Data/Web/Src/vue.js</code>的文件时，对应的Url为<code>http://127.0.0.1:{port}/Src/vue.js</code>。</p></li><li><p>Url路径也可以写为相对路径，注意路径是相对<code>Hiyori/Data/Web</code>而言。举例如下：</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- /Data/Web/Sign/Sign.html --&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--suppress ALL --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/Src/Js/vue3.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/Src/Js/tailwind.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
&gt;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过调用静态路径下的网页文件可以实现网页服务，然后使用<code>Hiyori.Utils.Spider.WebShot.Web2ImgBytes(url,width)</code> 函数将网页截取为图片，从而实现Html渲染图片的功能\`。举例如下：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&quot;&quot;&quot;
Hiyori/Plugins/Normal_Plugins/SignIn/__init__.py
&quot;&quot;&quot;</span>
<span class="token keyword">from</span> nonebot <span class="token keyword">import</span> get_driver
<span class="token keyword">from</span> nonebot<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>onebot<span class="token punctuation">.</span>v11 <span class="token keyword">import</span> MessageEvent<span class="token punctuation">,</span> MessageSegment<span class="token punctuation">,</span> Bot
<span class="token comment"># ...</span>

<span class="token comment"># Hiyori获取用户名工具函数</span>
<span class="token keyword">from</span> Hiyori<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>API<span class="token punctuation">.</span>QQ <span class="token keyword">import</span> GetQQGrouperName<span class="token punctuation">,</span> GetQQStrangerName
<span class="token comment"># Hiyori网页截取工具函数</span>
<span class="token keyword">from</span> Hiyori<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>Spider<span class="token punctuation">.</span>WebShot <span class="token keyword">import</span> Web2ImgBytes
<span class="token comment"># ...</span>

<span class="token comment"># 获取Hiyori监听端口号</span>
config <span class="token operator">=</span> get_driver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
port <span class="token operator">=</span> config<span class="token punctuation">[</span><span class="token string">&quot;port&quot;</span><span class="token punctuation">]</span>
url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;127.0.0.1:</span><span class="token interpolation"><span class="token punctuation">{</span>port<span class="token punctuation">}</span></span><span class="token string">/Sign/Sign.html?QQ=</span><span class="token interpolation"><span class="token punctuation">{</span>QQ<span class="token punctuation">}</span></span><span class="token string">&amp;&amp;Name=</span><span class="token interpolation"><span class="token punctuation">{</span>Name<span class="token punctuation">}</span></span><span class="token string">&amp;&amp;LastSignDate=</span><span class="token interpolation"><span class="token punctuation">{</span>Ls<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> \\
      <span class="token string-interpolation"><span class="token string">f&quot;&amp;&amp;AddGold=</span><span class="token interpolation"><span class="token punctuation">{</span>AddMoney<span class="token punctuation">}</span></span><span class="token string">&amp;&amp;AddAttitude=</span><span class="token interpolation"><span class="token punctuation">{</span>AddAttitude<span class="token punctuation">}</span></span><span class="token string">&amp;&amp;Gold=</span><span class="token interpolation"><span class="token punctuation">{</span>User<span class="token punctuation">.</span>Money<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> \\
      <span class="token string-interpolation"><span class="token string">f&quot;&amp;&amp;Attitude=</span><span class="token interpolation"><span class="token punctuation">{</span>User<span class="token punctuation">.</span>Attitude<span class="token punctuation">}</span></span><span class="token string">&amp;&amp;HasSign=false&amp;&amp;SignCombo={{ComboDay}}&quot;</span></span>
<span class="token comment"># 网页抓取</span>
image <span class="token operator">=</span> <span class="token keyword">await</span> Web2ImgBytes<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">800</span><span class="token punctuation">)</span>
<span class="token comment"># 消息生成</span>
msg <span class="token operator">=</span> MessageSegment<span class="token punctuation">.</span>at<span class="token punctuation">(</span>QQ<span class="token punctuation">)</span> <span class="token operator">+</span> MessageSegment<span class="token punctuation">.</span>image<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
<span class="token keyword">await</span> signIn<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-插件api请求" tabindex="-1"><a class="header-anchor" href="#_2-2-插件api请求" aria-hidden="true">#</a> 2.2 插件API请求</h3><ul><li><code>妃爱</code>推荐将插件的API请求放在插件目录下的<code>api.py</code>中。</li><li>为了避免冲突，插件的API的路由请求统一为<code>Plugin/path/to/your/plugin</code>，例如：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Hiyori/Plugins/Basic_plugins/Plugin_Manager/api.py</span>

<span class="token keyword">from</span> nonebot <span class="token keyword">import</span> get_asgi
app <span class="token operator">=</span> get_asgi<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>get</span><span class="token punctuation">(</span><span class="token string">&quot;/Plugins/Basic_plugins/Plugin_Manager/Plugin_info&quot;</span><span class="token punctuation">,</span> response_class<span class="token operator">=</span>JSONResponse<span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-其他api请求" tabindex="-1"><a class="header-anchor" href="#_2-3-其他api请求" aria-hidden="true">#</a> 2.3 其他API请求</h3><p><code>妃爱</code>将无法分类到<code>插件</code>的API请求统一放在<code>Hiyori/Plugins/Web_plugins</code> 目录下，路由请求与普通的插件API规范一致，即<code>Plugin/path/to/your/plugin</code>。</p><h2 id="三-api汇总" tabindex="-1"><a class="header-anchor" href="#三-api汇总" aria-hidden="true">#</a> 三. API汇总</h2><p>正在开发中...</p>`,17),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","BackEnd.html.vue"]]);export{r as default};
