import{_ as l,r as o,o as i,c as r,b as a,w as e,a as p,d as n,e as s}from"./app-4b0bc845.js";const u="/Src/Developer/Data/1.png",d="/Src/Developer/Data/2.png",k="/Src/Developer/Data/3.png",m={},b=p(`<p><strong><code>User</code>、<code>Group</code>两张表的实现有特殊的处理，请详细阅读</strong></p><h2 id="一-用户数据表user-群组数据表group" tabindex="-1"><a class="header-anchor" href="#一-用户数据表user-群组数据表group" aria-hidden="true">#</a> 一. 用户数据表<code>User</code> 群组数据表<code>Group</code></h2><h3 id="_1-0-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-0-快速入门" aria-hidden="true">#</a> 1.0 快速入门</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Hiyori<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>Database <span class="token keyword">import</span> DB_User

<span class="token comment"># 获取用户信息</span>
User <span class="token operator">=</span> DB_User<span class="token punctuation">.</span>getUser<span class="token punctuation">(</span>QQ <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">)</span>
Group <span class="token operator">=</span> DB_User<span class="token punctuation">.</span>getGroup<span class="token punctuation">(</span>GroupID<span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">)</span>

<span class="token comment"># 用户信息保存</span>
User<span class="token punctuation">.</span>NickName <span class="token operator">=</span> <span class="token string">&quot;Hiyori&quot;</span>
DB_User<span class="token punctuation">.</span>updateUser<span class="token punctuation">(</span>user <span class="token operator">=</span> User<span class="token punctuation">)</span>
Group<span class="token punctuation">.</span>Permission <span class="token operator">=</span> <span class="token number">2</span>
DB_User<span class="token punctuation">.</span>updateGroup<span class="token punctuation">(</span>group <span class="token operator">=</span> Group<span class="token punctuation">)</span>

<span class="token comment"># 金币</span>
DB_User<span class="token punctuation">.</span>spendMoney<span class="token punctuation">(</span>QQ <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">,</span> Money <span class="token operator">=</span> <span class="token number">2.00</span><span class="token punctuation">)</span> 支出 <span class="token number">2.00</span>
DB_User<span class="token punctuation">.</span>spendMoney<span class="token punctuation">(</span>QQ <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">,</span> Money <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.00</span><span class="token punctuation">)</span> 收入 <span class="token number">2.00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-基本信息" tabindex="-1"><a class="header-anchor" href="#_1-1-基本信息" aria-hidden="true">#</a> 1.1 基本信息</h3><ul><li><p>存放路径 <code>/Hiyori/Data/Database/Hiyori.db</code></p></li><li><p>数据库类型 <code>sqlite</code></p></li><li><p>表名 <code>User</code>、<code>Group</code></p></li><li><p>表格式： <img src="`+u+'" alt=""></p><p><img src="'+d+'" alt=""></p></li><li><p>Python实现：</p></li></ul>',6),v=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# Hiyoti.Utils.Database.user.py"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},"("),s("peewee"),n("span",{class:"token punctuation"},"."),s("Model"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    QQ `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("IntegerField"),n("span",{class:"token punctuation"},"("),s("primary_key"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),s(" index"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},")"),s(`
    Name `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("TextField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),s(`
    NickName `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("TextField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),s(`
    Permission `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("IntegerField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),s(`
                                     constraints`),n("span",{class:"token operator"},"="),n("span",{class:"token punctuation"},"["),s("peewee"),n("span",{class:"token punctuation"},"."),s("Check"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Permission IN (0,1,2,3)'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
    Attitude `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("IntegerField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" index"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},")"),s(`
    Money `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("IntegerField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),s(`
                                constraints`),n("span",{class:"token operator"},"="),n("span",{class:"token punctuation"},"["),s("peewee"),n("span",{class:"token punctuation"},"."),s("Check"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Money >= 0'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
    CD `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("IntegerField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),s(`
                             constraints`),n("span",{class:"token operator"},"="),n("span",{class:"token punctuation"},"["),s("peewee"),n("span",{class:"token punctuation"},"."),s("Check"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'CD >= 0'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
    SignInDate `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("TextField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Meta"),n("span",{class:"token punctuation"},":"),s(`
        database `),n("span",{class:"token operator"},"="),s(` Hiyori
        table_name `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"User"'),s(`
        
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=n("div",{class:"language-python line-numbers-mode","data-ext":"py"},[n("pre",{class:"language-python"},[n("code",null,[n("span",{class:"token comment"},"# Hiyoti.Utils.Database.user.py"),s(`

`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Group"),n("span",{class:"token punctuation"},"("),s("peewee"),n("span",{class:"token punctuation"},"."),s("Model"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},":"),s(`
    GroupID `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("IntegerField"),n("span",{class:"token punctuation"},"("),s("primary_key"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),s(" index"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"True"),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},")"),s(`
    GroupName `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("TextField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'""'),n("span",{class:"token punctuation"},")"),s(`
    Permission `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("IntegerField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),s(`
                                     constraints`),n("span",{class:"token operator"},"="),n("span",{class:"token punctuation"},"["),s("peewee"),n("span",{class:"token punctuation"},"."),s("Check"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Permission IN (0,1,2,3)'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`
    Status `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("TextField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},'"on"'),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},")"),s(`
    CD `),n("span",{class:"token operator"},"="),s(" peewee"),n("span",{class:"token punctuation"},"."),s("IntegerField"),n("span",{class:"token punctuation"},"("),s("default"),n("span",{class:"token operator"},"="),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},","),s(" null"),n("span",{class:"token operator"},"="),n("span",{class:"token boolean"},"False"),n("span",{class:"token punctuation"},","),s(`
                             constraints`),n("span",{class:"token operator"},"="),n("span",{class:"token punctuation"},"["),s("peewee"),n("span",{class:"token punctuation"},"."),s("Check"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'CD >= 0'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(`

    `),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Meta"),n("span",{class:"token punctuation"},":"),s(`
        database `),n("span",{class:"token operator"},"="),s(` Hiyori
        table_name `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"Group"'),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=p(`<h3 id="_1-2-字段说明" tabindex="-1"><a class="header-anchor" href="#_1-2-字段说明" aria-hidden="true">#</a> 1.2 字段说明</h3><h4 id="_1-2-1-user-用户数据表" tabindex="-1"><a class="header-anchor" href="#_1-2-1-user-用户数据表" aria-hidden="true">#</a> 1.2.1 <code>User</code> 用户数据表</h4><ul><li><code>QQ</code> 主键，QQ号</li><li><code>Name</code> QQ名</li><li><code>NickName</code> 用户自定义昵称</li><li><code>Permission</code> 权限级，分为0、1、2、3四级。0为管理权限，1为领养权限（暂时未使用），2为普通权限，3为黑名单</li><li><code>Attitude</code> 好感度</li><li><code>Money</code> 金币</li><li><code>CD</code> 冷却权重，为用户一分钟可调用插件的上限。</li><li><code>SignInDate</code> 签到日期</li></ul><h4 id="_1-2-2-group-群组数据表" tabindex="-1"><a class="header-anchor" href="#_1-2-2-group-群组数据表" aria-hidden="true">#</a> 1.2.2 <code>Group</code> 群组数据表</h4><ul><li><code>GroupID</code> 主键，群号</li><li><code>GroupName</code> 群名</li><li><code>Permission</code> 权限级，分为0、1、2、3四级。0为管理权限，1为领养权限（暂时未使用），2为普通权限，3为黑名单</li><li><code>Status</code> 状态，用于记录<code>妃爱</code>的开机与关机状态</li><li><code>CD</code> 冷却权重，为群组一分钟可调用插件的上限。</li></ul><h3 id="_1-3-开发说明" tabindex="-1"><a class="header-anchor" href="#_1-3-开发说明" aria-hidden="true">#</a> 1.3 开发说明</h3><h4 id="_1-3-1-实现说明" tabindex="-1"><a class="header-anchor" href="#_1-3-1-实现说明" aria-hidden="true">#</a> 1.3.1 实现说明</h4><ol><li><strong>由于<code>User</code>、<code>Group</code>两个表的调用频率较高，同时这两张表的读取频率远高于写入频率，因此做了内存缓存优化。</strong> 在<code>妃爱</code> 开机时，读取数据库并将数据全部加载进内存中。<code>妃爱</code>对数据库的增删查改的实现如下：</li></ol><ul><li>对于读取的数据而言，<code>妃爱</code>会直接从内存中读取，而不会进行数据库查询操作。</li><li>对于写入的数据而言，<code>妃爱</code>会先写入内存，随后将数据写入数据库。</li></ul><p>实际上，这个缓存机制借鉴了内存cache的写穿<code>Write-through</code>机制。</p><ol start="2"><li><strong>由于读取的数据是仅从内存中读取的，因此直接修改数据库并不会让运行中的<code>妃爱</code>立即生效。</strong> 可以通过两种办法来让<code>妃爱</code> 加载运行时获取数据库的修改：</li></ol><ul><li>修改数据库后，重启<code>妃爱</code>。因为妃爱会在重启时重新将数据加载进内存中</li><li>使用管理指令<code>#用户数据库重载</code>，效果为重新读取数据库并加载进内存中。相比于前者，其优点在于速度更快，因为不用重启<code>妃爱</code> 即可达到相同的效果。该指令的实现代码在<code>/Hiyori/Plugins/Basic_plugins/Database_Manager/user.py</code>中。</li></ul><h4 id="_1-3-2-表的封装与使用" tabindex="-1"><a class="header-anchor" href="#_1-3-2-表的封装与使用" aria-hidden="true">#</a> 1.3.2 表的封装与使用</h4><p>为了避免繁琐的SQL查询操作，因此<code>妃爱</code>使用了<code>peewee</code>这一<code>ORM</code> 框架，并进行了封装。代码的具体实现在<code>/Hiyori/Utils/Database/user.py</code>中。</p><p>使用方法：</p><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>from Hiyori.Utils.Database import DB_User # 方法类，无需实例化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有功能函数均有注释，编写项目的时候可以直接查看。简略说明如下：</p><ul><li><p><code>DB_User.userInit()</code>: 模块初始化函数，通常一次运行只调用一次。</p></li><li><p><code>DB_User.refreshAll()</code>: 从QQ服务器拉取刷新全部用户进数据库与内存。载入方式为增量载入，不会删除数据库中已删除的值，只进行更新或者添加</p></li><li><p><code>DB_User.reload()</code>: 重新载入数据库，将数据库重新载入内存中。载入方式为增量载入，不会删除数据库中已删除的值，只进行更新或者添加</p></li><li><p><code>DB_User.userExist(QQ: int)</code>: 检查数据库中是否存在对应用户，不存在则更新写入对应用户，无返回值</p></li><li><p><code>DB_User.groupExist(GroupID: int)</code>: 检查数据库中是否存在对应群组，不存在则更新写入对应群组，无返回值</p></li><li><p><code>DB_User.hasUser(QQ: int) -&gt; bool</code>: 检查数据库中是否存在对应用户并返回结果，不存在时不进行更新</p></li><li><p><code>DB_User.hasGroup(GroupID: int) -&gt; bool</code>: 检查数据库中是否存在对应群组并返回结果，不存在也不更新</p></li><li><p><code>DB_User.getUser(QQ: int) -&gt; User</code>: 获取用户，不存在则会先创建对应用户</p></li><li><p><code>DB_User.getAllUsers() -&gt; dict</code>: 返回用户的内存字典</p></li><li><p><code>DB_User.getGroup(GroupID: int) -&gt; Group</code>: 获取群组，不存在则会先创建对应群组</p></li><li><p><code>DB_User.getAllGroups() -&gt; dict</code>: 返回群组内存字典</p></li><li><p><code>DB_User.updateUser(user: User)</code>: 更新用户 (内存与数据库都会更新)</p></li><li><p><code>DB_User.updateGroup(group: Group)</code>: 更新群组 (内存与数据库都会更新)</p></li><li><p><code>DB_User.isOwner(QQ: int) -&gt; bool</code>: Permission=0</p></li><li><p><code>DB_User.isAdmin(QQ: int) -&gt; bool</code>: Permission=0 or Permission=1</p></li><li><p><code>DB_User.spendMoney(QQ: int, Money: float) -&gt; bool</code>: 消费对应账户的金币，不成功则返回False。金币的最小单位为0.01，小于0.01的将被抹去。当需要加钱的时候只需要设为负数即可。</p></li></ul><h2 id="二-背包数据表-item" tabindex="-1"><a class="header-anchor" href="#二-背包数据表-item" aria-hidden="true">#</a> 二. 背包数据表 <code>Item</code></h2><h3 id="_2-0-快速入门" tabindex="-1"><a class="header-anchor" href="#_2-0-快速入门" aria-hidden="true">#</a> 2.0 快速入门</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Hiyori<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>Database <span class="token keyword">import</span> DB_Item

<span class="token comment"># 获取物品信息</span>
Item <span class="token operator">=</span> DB_Item<span class="token punctuation">.</span>getUserItem<span class="token punctuation">(</span>QQ <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">,</span> ItemName <span class="token operator">=</span> <span class="token string">&quot;小红花&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 获取用户物品列表</span>
Items <span class="token operator">=</span> DB_Item<span class="token punctuation">.</span>getUserItemALL<span class="token punctuation">(</span>QQ <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">)</span>
<span class="token comment"># 更新物品信息</span>
Item<span class="token punctuation">.</span>Quantity <span class="token operator">+=</span> <span class="token number">1</span>
Item<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-基本信息" tabindex="-1"><a class="header-anchor" href="#_2-1-基本信息" aria-hidden="true">#</a> 2.1 基本信息</h3><ul><li><p>存放路径 <code>/Hiyori/Data/Database/Hiyori.db</code></p></li><li><p>数据库类型 <code>sqlite</code></p></li><li><p>表名 <code>item</code></p></li><li><p>表格式： <img src="`+k+`" alt=""></p></li><li><p>Python实现：</p></li></ul><details class="custom-container details"><summary class="custom-container-title">DETAILS</summary><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Hiyori.Utils.Database.item.py</span>

<span class="token comment"># 用户物品表</span>
<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>peewee<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    QQ <span class="token operator">=</span> peewee<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    Item <span class="token operator">=</span> peewee<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    Quantity <span class="token operator">=</span> peewee<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token comment"># Decimal表示物品的小数点位数，存放时均以整数存放。实际数值除以具体位数</span>
    Decimal <span class="token operator">=</span> peewee<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        database <span class="token operator">=</span> Hiyori
        table_name <span class="token operator">=</span> <span class="token string">&quot;Item&quot;</span>
        primary_key <span class="token operator">=</span> peewee<span class="token punctuation">.</span>CompositeKey<span class="token punctuation">(</span><span class="token string">&quot;QQ&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Item&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_2-2-字段说明" tabindex="-1"><a class="header-anchor" href="#_2-2-字段说明" aria-hidden="true">#</a> 2.2 字段说明</h3><p><strong>物品表以(QQ,Item)这一元组为主键</strong></p><ul><li><code>QQ</code> QQ号</li><li><code>Item</code> 物品名，所有物品名都应该是唯一的</li><li><code>Quantity</code> 数量，为整数</li><li><code>Decimal</code> 小数点位数，存放时均以整数存放。实际数值除以具体位数</li></ul><h3 id="_2-3-开发说明" tabindex="-1"><a class="header-anchor" href="#_2-3-开发说明" aria-hidden="true">#</a> 2.3 开发说明</h3><p><code>妃爱</code>的所有数据库存储均使用了<code>peewee</code>这一ORM框架，每个表均通过各自的静态方法类对功能进行封装，后续不再重复提及。</p><p>代码的具体实现在<code>/Hiyori/Utils/Database/item.py</code>中。</p><h4 id="_2-3-1-表的封装与使用" tabindex="-1"><a class="header-anchor" href="#_2-3-1-表的封装与使用" aria-hidden="true">#</a> 2.3.1 表的封装与使用：</h4><div class="language-Python line-numbers-mode" data-ext="Python"><pre class="language-Python"><code>from Hiyori.Utils.Database import DB_Item # 静态方法类，无需实例化
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有功能函数均有注释，编写项目的时候可以直接查看。简略说明如下：</p><ul><li><p><code>DB_Item.itemInit()</code>: 模块初始化函数，通常一次运行只调用一次。</p></li><li><p><code>DB_Item.getUserItemALL(QQ: int) -&gt; list[Item]</code>: 按QQ号获取用户物品数据</p></li><li><p><code>DB_Item.getUserItem(QQ: int, ItemName: str) -&gt; Item</code>: 按QQ号与物品名获取对应物品数据，若不存在则先创建</p></li><li><p><code>DB_Item.hasItem(QQ: int, ItemName: str) -&gt; bool</code>: 判断用户是否持有对应物品，若持有则返回True</p></li></ul><h4 id="_2-3-2-数据更新" tabindex="-1"><a class="header-anchor" href="#_2-3-2-数据更新" aria-hidden="true">#</a> 2.3.2 数据更新：</h4><ol><li><strong>与<code>User</code>、<code>Group</code>表的区别</strong>：<br><code>Item</code>表不使用内存缓存，直接对数据库进行操作。因此直接使用<code>peewee</code>的<code>.save()</code>即可直接进行数据的更新，示例如下：</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Hiyori<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>Database <span class="token keyword">import</span> DB_Item

<span class="token comment"># 获取物品信息</span>
Item <span class="token operator">=</span> DB_Item<span class="token punctuation">.</span>getUserItem<span class="token punctuation">(</span>QQ <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">,</span> ItemName <span class="token operator">=</span> <span class="token string">&quot;小红花&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 更新物品信息</span>
Item<span class="token punctuation">.</span>Quantity <span class="token operator">+=</span> <span class="token number">1</span>
Item<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>对于<code>Quantity</code>与<code>Decimal</code>字段的说明：</li></ol><ul><li>一般而言，设计的物品数量一般为整数，此时不需要考虑<code>Decimal</code>字段，直接对<code>Quantity</code>进行更新即可。</li><li>若需要存储带小数点的物品数量，则使用<code>Decimal</code>字段。例如，设计物品数量可以带两位小数点，则添加7.21个物品的示例如下：</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> Hiyori<span class="token punctuation">.</span>Utils<span class="token punctuation">.</span>Database <span class="token keyword">import</span> DB_Item
Item <span class="token operator">=</span> DB_Item<span class="token punctuation">.</span>getUserItem<span class="token punctuation">(</span>QQ <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">,</span> ItemName <span class="token operator">=</span> <span class="token string">&quot;起爆器&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># 更新物品信息</span>
Item<span class="token punctuation">.</span>Quantity <span class="token operator">=</span> <span class="token number">721</span>
Item<span class="token punctuation">.</span>Decimal <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment"># 仅初始化时添加</span>
Item<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>为了提高Item表的灵活性，因此并未限制<code>Quantity</code>的数值范围，在数据库写入时检查<code>Quantity&gt;=0</code>。</strong> <s>（一定不是设计的时候忘了。）</s> 在实现时请注意自行检查。</li></ul><h2 id="三-文件存储" tabindex="-1"><a class="header-anchor" href="#三-文件存储" aria-hidden="true">#</a> 三. 文件存储</h2><p>文件类存储，例如<code>json</code>配置文件，以及插件所需的资源文件等，<code>妃爱</code>推荐存放在<code>/Data/插件名/</code>文件夹下。</p>`,43);function _(y,D){const t=o("CodeGroupItem"),c=o("CodeGroup");return i(),r("div",null,[b,a(c,null,{default:e(()=>[a(t,{title:"User"},{default:e(()=>[v]),_:1}),a(t,{title:"Group"},{default:e(()=>[h]),_:1})]),_:1}),g])}const Q=l(m,[["render",_],["__file","DataBase.html.vue"]]);export{Q as default};
